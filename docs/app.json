[{"name": "app.py", "content": "from shiny.express import ui, input, render\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n# Load the tips dataset\ntips = sns.load_dataset(\"tips\")\n\n# Page options\nui.page_opts(title=\"Restaurant Tips Dashboard\", fillable=True)\n\n# Sidebar layout and filters\nwith ui.sidebar(title=\"\ud83c\udf08 Data Filters\", style=\"padding:4px 4px 4px 4px;\"):\n    ui.h6(\"\ud83d\udcc5 Day & \ud83d\udeac Smoker\", style=\"color:#1976d2;background-color:#e3f2fd;padding:1px 2px;border-radius:4px;font-size:0.95rem;margin-bottom:8px;\")\n    ui.input_select(\n        \"selected_day\",\n        \"Day of the Week:\",\n        choices=[\"All\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n        selected=\"All\"\n    )\n    ui.input_checkbox(\"show_smoker\", \"Include Smoker Data\", True)\n    ui.hr(style=\"border-top:1px solid #1976d2;margin:6px 0;\")\n    ui.h6(\"\ud83d\udcb5 Bill & \ud83d\udc64 Sex\", style=\"color:#388e3c;background-color:#e8f5e9;padding:1px 2px;border-radius:4px;font-size:0.95rem;margin-bottom:8px;\")\n    ui.input_slider(\n        \"bill_range\",\n        \"Total Bill Range:\",\n        min=float(tips[\"total_bill\"].min()),\n        max=float(tips[\"total_bill\"].max()),\n        value=(float(tips[\"total_bill\"].min()), float(tips[\"total_bill\"].max())),\n        step=0.5\n    )\n    ui.input_select(\n        \"selected_sex\",\n        \"Sex:\",\n        choices=[\"All\", \"Male\", \"Female\"],\n        selected=\"All\"\n    )\n    ui.hr(style=\"border-top:1px solid #388e3c;margin:6px 0;\")\n    ui.h6(\"\ud83e\udded Dashboard Information\", style=\"color:#6d4c41;background-color:#fff3e0;padding:1px 2px;border-radius:4px;font-size:0.95rem;margin-bottom:8px;\")\n    @render.text\n    def info():\n        bill_min, bill_max = input.bill_range()\n        return (\n            f\"Day: {input.selected_day()}\\n\"\n            f\"Smoker: {'Included' if input.show_smoker() else 'Excluded'}\\n\"\n            f\"Bill Range: ${bill_min:.2f} - ${bill_max:.2f}\\n\"\n            f\"Sex: {input.selected_sex()}\"\n        )\n\nwith ui.layout_columns():  # Metric cards row\n    with ui.card(style=\"background-color:lightblue; height:180px; width:360px; display:flex; flex-direction:column; justify-content:center; align-items:center; text-align:center;\"):\n        ui.h4(\"\ud83d\udcb0 Total Bills Analyzed\")\n        @render.text\n        def total_bills():\n            return f\"${filtered_data()['total_bill'].sum():.2f}\"\n\n    with ui.card(style=\"background-color:moccasin; height:180px; width:360px; display:flex; flex-direction:column; justify-content:center; align-items:center; text-align:center;\"):\n        ui.h4(\"\ud83d\udcca Average Tip Percentage\")\n        @render.text\n        def avg_tip_percent():\n            df = filtered_data()\n            if not df.empty:\n                return f\"{((df['tip'] / df['total_bill']).mean() * 100):.2f}%\"\n            return \"N/A\"\n\n    with ui.card(style=\"background-color:honeydew; height:180px; width:360px; display:flex; flex-direction:column; justify-content:center; align-items:center; text-align:center;\"):\n        ui.h4(\"\ud83d\udc65 Number of Records\")\n        @render.text\n        def num_records():\n            return f\"{len(filtered_data())} records\"\n\n\nwith ui.layout_columns():  # Charts and data table row\n    with ui.card(full_screen=True):\n        ui.card_header(\"Tip vs Total Bill by Sex (Scatter)\")\n        @render.plot\n        def chart_scatter():\n            df = filtered_data()\n            fig, ax = plt.subplots()\n            colors = {'Male': 'blue', 'Female': 'red'}\n            for sex, group in df.groupby('sex', observed=False):\n                ax.scatter(group['total_bill'], group['tip'], label=sex, color=colors.get(sex, 'gray'))\n            ax.set_xlabel('Total Bill ($)')\n            ax.set_ylabel('Tip ($)')\n            ax.set_title('Tip vs Total Bill')\n            ax.legend(title='Sex')\n            fig.tight_layout()\n            return fig\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Average Tip by Day (Bar Chart)\")\n        @render.plot\n        def chart_bar():\n            df = filtered_data()\n            avg_tip = df.groupby('day', observed=False)['tip'].mean()\n            fig, ax = plt.subplots()\n            avg_tip.plot(kind='bar', ax=ax, color='skyblue')\n            ax.set_xlabel('Day')\n            ax.set_ylabel('Average Tip ($)')\n            ax.set_title('Average Tip by Day')\n            fig.tight_layout()\n            return fig\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Tip Distribution by Sex (Violin Plot)\")\n        @render.plot\n        def chart_violin():\n            df = filtered_data()\n            fig, ax = plt.subplots()\n            sexes = [\"Male\", \"Female\"]\n            data = [df[df[\"sex\"] == sex][\"tip\"] for sex in sexes]\n            parts = ax.violinplot(data, showmeans=True, showmedians=True)\n            ax.set_xticks([1, 2])\n            ax.set_xticklabels(sexes)\n            ax.set_xlabel('Sex')\n            ax.set_ylabel('Tip ($)')\n            ax.set_title('Tip Distribution by Sex')\n            fig.tight_layout()\n            return fig\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Filtered Tips Data\")\n        @render.data_frame\n        def table():\n            return filtered_data()\n\n\ndef filtered_data():\n    \"\"\"\n    Returns a filtered DataFrame based on sidebar selections.\n    Filters: day, smoker, bill range, sex.\n    \"\"\"\n    df = tips.copy()\n    if input.selected_day() != \"All\":\n        df = df[df[\"day\"] == input.selected_day()]\n    if not input.show_smoker():\n        df = df[df[\"smoker\"] == \"No\"]\n    bill_min, bill_max = input.bill_range()\n    df = df[(df[\"total_bill\"] >= bill_min) & (df[\"total_bill\"] <= bill_max)]\n    if input.selected_sex() != \"All\":\n        df = df[df[\"sex\"] == input.selected_sex()]\n    return df\n\n", "type": "text"}]